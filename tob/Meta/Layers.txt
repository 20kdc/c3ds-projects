Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-09-15T01:07:16+01:00

====== Layers ======

Before going into this, it's worth noting that it seems different formats are used for the sending and receiving paths, though they go through the same classes.

From "send/recv calls at system level" outwards.

===== General =====

* [[:Structs:CBabelAsyncCore|CBabelAsyncCore]] pokes send/recv.
* [[:Structs:CBabelDConnection|CBabelDConnection]] handles the higher-level framing, and in particular appears to receive C_TID_BASE packets.
	* These packets can be MessageDispatch packets, and thus [[:Structs:CBabelMessage|CBabelMessage]] shows up.
	* Note however that data is //sent// via CBabelDConnection essentially directly.
* [[:Structs:CBabelClient|CBabelClient]] //usually// uses SendMessageA to send raw bytes.
	* This is used in 5 places, with the given formats:
		* WWR Packet
			* AddWWREntry
			* RemoveWWREntry
			* NotifyListeningPort
			* SendBinaryMessage
		* VSC Packet
			* [[:Structs:CBabelVirtualSocket|CBabelVirtualSocket]]::Connect(B_UIN *)
	* But then it wraps that with SendBinaryMessage.
	* There is also Connectx, which is wrapped by Connect - Connectx lets you supply an arbitrary handshake packet, while Connect generates the Docking Station login packet
		* The received packet is always 0x0A (C_TID_HANDSHAKE_RESPONSE)
		* The sent packet in practice is 0x25 (C_TID_HANDSHAKE)
	* The socket is written to by [[:Structs:CBabelVirtualSocket|CBabelVirtualSocket]]::Connect(B_UIN *) directly
	* GetClientInfo writes to the socket as well.
* Atop the Babel layer is the [[:Structs:NetManager|NetManager]]/C2E layer.
	* Worth noting is that there seems to be no encryption, though PRAY obfuscates things some (by accident, possibly).
* Atop this is the CAOS commands and such.

===== Specifics: NET WRIT =====

//**Big important warning here! NET: WRIT isn't actually used by the game's CAOS.**//
//**NET: WRIT is the only caller of NetManager::PostDirectMessage - which is itself the only caller of CBabelClient::ConnectToPeer.**//
//**This may imply that NetDirectLink/etc. are deprecated. Which would be really useful, if true...**//

* NetHandlers::SubCommand_NET_WRIT
	* [[:Structs:NetManager|NetManager]]::PostDirectMessage
		* [[:Structs:NetManager|NetManager]]::ConnectToPeer
			* [[:Structs:CBabelClient|CBabelClient]]::ConnectToPeer
				* [[:Structs:CBabelClient|CBabelClient]]::GetConnectionDetail
					* [[:Structs:CBabelSocket|CBabelSocket]]::Write (to server)
		* [[:Structs:NetDirectLink|NetDirectLink]]::SendData
			* //Can go via virtual circuits or via a direct link. Realistically, virtual circuits.//
				* [[:Structs:CBabelVirtualSocket|CBabelVirtualSocket]]::Write
					* [[:Structs:CBabelSocket|CBabelSocket]]::Write (to server)

===== Specifics: Creature History =====

* NetManager::somethingsomethingsomething
	* HistoryTransferOut
	* HistoryQueuedMessage::Send
		* DSNetManager::DSFeedHistory <- FANCY 0x21 EXTENSION PACKET
			* //regular transaction infrastructure//
