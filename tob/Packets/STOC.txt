Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-09-15T10:05:28+01:00

====== STOC ======

===== C_TID_BASE =====

Note that this acts as a "base" for other packets.

32 bytes

* +0: Type (//**but see +20**//)
	* int type
		* This is really really weird. It's treated as either char[4] or an int depending on the whim of the function.
	* [[:Structs:CBabelDConnection|CBabelDConnection]]::Handle
		* 0x09: MessageDispatch - C_TID_MESSAGE
		* 0x0A: Handshake Response - C_TID_HANDSHAKE_RESPONSE
			* This particular handler interprets the first (lowest) byte of the type as a char, using the second byte as an error code.
		* 0x0D: UserOnline - C_TID_USER_LINE
		* 0x0E: UserOffline - C_TID_USER_LINE
		* 0x0F: GetClientInfo transaction response, see CTOS
		* 0x13: GetConnectionDetail transaction response, see CTOS
		* 0x14: ClientCommand - C_TID_CLIENT_COMMAND
		* 0x1D: OnlineChange - C_TID_ONLINE_CHANGE
		* 0x1E: VirtualCircuitConnect - C_TID_VIRTUAL_CONNECT
		* 0x1F: VirtualCircuit - C_TID_VIRTUAL_CIRCUIT
		* 0x20: VirtualCircuitClose - C_TID_VIRTUAL_CIRCUIT_CLOSE
		* 0x21 through 0x24 inclusive: STOC shunts around weirdly, may imply something odd going on in [[:Structs:CBabelDConnection|CBabelDConnection]]
			* No evidence these are used here, but there's the implication that this is how the CTOS Docking Station-specific "Get Random User" packet is handled, at least conceptually.
		* 0x2A: Migrate - C_TID_MIGRATE
* +4: Field A
* +8: Field B
* +12: Field C
* +16: Field D
* +20: //**If non-zero, client will pass this to TicketDispatch. Please see the appropriate CTOS Response section.**//
	* int ticketDispatch
	* Worth noting: The size of a response packet is determined by the transaction ticket's inherent response size (//decided by the transaction starter//) + furtherData. See:
		* [[:Structs:CBabelTransactionTicket|CBabelTransactionTicket]]::SignalTicket
		* [[:Structs:CBabelDConnection|CBabelDConnection]]::Handle
* +24: Usually indicates the length of further data after the fixed-size portion (but only in packets with variable-length further data).
	* int furtherData
* +28: Field E

===== C_TID_MESSAGE =====

* Name is a guess
* Has a CTOS equivalent but it is not the same format!

This is used to send PRAY data. It might do some other things, but that's what the packet dumps show.
In particular, this packet type is how Norns are sent over the Warp!

32 bytes + message data

* Type: 0x09
* A/B: Ignored
* C/D: Ignored
* Ticket number: Ignored
* Further data: Length of the following [[Formats:Packed Babel Message]] in bytes. Note this includes its header.
* E: Ignored

This is followed by the actual message as described with the length.

* Received by [[:Structs:CBabelDConnection|CBabelDConnection]]::MessageDispatch
* Example: dsprotocol/pk/norn1
* Example: dsprotocol/pk/chat1

===== C_TID_HANDSHAKE_RESPONSE =====

* Name is a guess

The response to the CTOS C_TID_HANDSHAKE.

48 bytes + data

* Type: 0x0A
	* char type - not int!
* +1: Error code
	* unsigned char errorCode
	* 0: Unknown reason
	* 1: Connection OK
	* 2: Client/server offline
	* 3: Invalid nickname/password
	* 4: Nickname already logged on
	* 5: Too many users on server
	* 6: Internal error
	* 7: Client needs update (//HAHAHAHAHA YEAH LIKE RIGHT//)
* A/B: Server UID/HID - if UID is 0, considered an error.
* C/D: Client's new UID/HID
* Ticket number: Ignored
* Further data: Ignored
* E: Ignored
* (...Ignored...)
* +44: Additional data length
	* int addDataLen

Followed by additional data:
* +0: If not 1, server list updates are disabled.
	* int servInfoFlagA
* +4: If not 1, server list updates are disabled.
	* int servInfoFlagB
* +8: Amount of server info records.
Each server info record (representing a [[:Structs:CBabelServerInfo|CBabelServerInfo]]):
* +0: Port
* +4: ID
* +8: Two zero-terminated strings, the IP address and server name.

* Received by [[:Structs:CBabelClient|CBabelClient]]::Connectx
* Example: dsprotocol/pk/login-ok1

===== C_TID_USER_LINE =====

* Name is a guess

32 bytes + additional data

* Type: 0x0D for online, 0x0E for offline
* A/B: Ignored
* C/D: Ignored
* Ticket number: Ignored
* Further data: Length of ensuing object.
* E: Ignored
Followed by a [[:Formats:Packed Babel Short User Data|Packed Babel Short User Data Object.]]

* Received by [[:Structs:CBabelDConnection|CBabelDConnection]]::UserOnline / [[:Structs:CBabelDConnection|CBabelDConnection]]::UserOffline
* Example: dsprotocol/dsd/don.dump packet number 11

===== C_TID_CLIENT_COMMAND =====

* Name is a guess
* Has a CTOS equivalent

Used to notify the client of events.

36 bytes

* Type: 0x14
* A/B: Server UID/HID
* C/D: //Presumably// sender UID/HID (but uncertain)
* Ticket number: Ignored
* Further data: Ignored
* E: Relevant to the Virtual Circuit system, but not yet sure how
* +32: Sub-command
	* int subCommand
	* If this is 0xE, this is passed into some as-of-yet not understood guts of the Virtual Circuit system.
	* //Otherwise//, this is passed to [[:ClientMessages|ClientMessages]].

Received by [[:Structs:CBabelDConnection|CBabelDConnection]]::ClientClientCommand

===== C_TID_VIRTUAL_CONNECT =====

* Has a CTOS equivalent

44 bytes

* Type: 0x1e
* A/B: ?
* C/D: ?
* Ticket number: ?
* Further data: ?
* E: ?
* +32: ?
* +36: ?
* +40: ?

* Received by [[:Structs:CBabelDConnection|CBabelDConnection]]::VirtualCircuitConnect

Responded to with a C_TID_CLIENT_COMMAND (details not written) (see CTOS page for further details)

===== C_TID_VIRTUAL_CIRCUIT =====

* Name is a guess
* Has a CTOS equivalent

Transmission of data through a virtual circuit
32 + 12 + N bytes

* Received by [[:Structs:CBabelDConnection|CBabelDConnection]]::VirtualCircuit

===== C_TID_VIRTUAL_CIRCUIT_CLOSE =====

* Name is a guess
* Has a CTOS equivalent

* Received by [[:Structs:CBabelDConnection|CBabelDConnection]]::VirtualCircuitClose

===== C_TID_MIGRATE =====

* Name is a guess

Client dials ctlcpc180.cyberlife.co.uk - fat chance of getting //that //back up...

* Received by [[:Structs:CBabelDConnection|CBabelDConnection]]::Migrate
