Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-09-15T10:05:28+01:00

====== STOC ======

===== C_TID_BASE =====

Note that this acts as a "base" for other packets.

32 bytes

* +0: Type (//**but see +20**//)
	* int type
		* This is really really weird. It's treated as either char[4] or an int depending on the whim of the function.
	* [[:Structs:CBabelDConnection|CBabelDConnection]]::Handle
		* 0x09: MessageDispatch - C_TID_MESSAGE
		* 0x0A: Handshake Response - C_TID_HANDSHAKE_RESPONSE
			* This particular handler interprets the first (lowest) byte of the type as a char, using the second byte as an error code.
		* 0x0D: UserOnline
		* 0x0E: UserOffline
		* 0x14: ClientCommand - C_TID_CLIENT_COMMAND
		* 0x1D: OnlineChange
		* 0x1E: VirtualCircuitConnect - C_TID_VIRTUAL_CONNECT
		* 0x1F: VirtualCircuit
		* 0x20: VirtualCircuitClose
		* 0x21 through 0x24 inclusive: STOC shunts around weirdly, may imply something odd going on in [[:Structs:CBabelDConnection|CBabelDConnection]]
* +4: Field A
* +8: Field B
* +12: Field C
* +16: Field D
* +20: //**If non-zero, client will pass this to TicketDispatch. Please see the appropriate CTOS Response section.**//
	* int ticketDispatch
	* Worth noting: The size of a response packet is determined by the transaction ticket's inherent response size (//decided by the transaction starter//) + furtherData. See:
		* [[:Structs:CBabelTransactionTicket|CBabelTransactionTicket]]::SignalTicket
		* [[:Structs:CBabelDConnection|CBabelDConnection]]::Handle
* +24: Usually indicates the length of further data after the fixed-size portion (but only in packets with variable-length further data).
	* int furtherData
* +28: Field E

===== C_TID_MESSAGE =====

//name is a guess//
40 bytes + message data

* +0: Type 0x09
	* int type
* +4: Server UID
	* int serverUID
* +8: Server HID
	* int serverHID
* +12: User UID (as if from [[:Structs:CBabelClient|CBabelClient]]::GetUser)
	* int userUID
* +16: User HID
	* int userHID
* +20: 0
	* int zero
* +24: Length of the following [[Formats:Packed Babel Message]] in bytes. Note this is the whole thing including framing.
	* int babelMsgLen
* +28: 0
	* int zero
* +32: Target UID
	* int targetUID
* +36: Target HID
	* int targetHID

This is followed by the actual message as described with the length.

See [[:Structs:CBabelClient|CBabelClient]]::SendBinaryMessage
For a sent packet, see dsprotocol/pk/chat1
For a received packet, see dsprotocol/pk/norn1
NOTE: This packet type is how Norns are sent over the Warp!

===== C_TID_HANDSHAKE_RESPONSE =====

//name is a guess//
48 bytes + data

* +0: Type 0x0A
	* char type
* +1: Error code
	* unsigned char errorCode
* +4: Server UID - if 0, considered an error
	* int serverUID
* +8: Server HID
	* int serverHID
* +12: New user UID
	* int userUID
* +16: New user HID
	* int userHID
* +44: Additional data length
	* int addDataLen

Followed by additional data.
The additional data appears to be (from rebabel's login-ok1) part of a mechanism to remotely update the server list.

Seen in [[:Structs:CBabelClient|CBabelClient]]::Connectx

===== C_TID_CLIENT_COMMAND =====

//name is a guess//
//Has an CTOS equivalent//
36 bytes

* Type: 0x14
* A/B: Server UID/HID
* C/D: //Presumably// sender UID/HID (but uncertain)
* Ticket number: Ignored
* Further data: Ignored
* E: Relevant to the Virtual Circuit system, but not yet sure how
* +32: Sub-command
	* int subCommand
	* If this is 0xE, this is passed into some as-of-yet not understood guts of the Virtual Circuit system.
	* //Otherwise//, this is passed to [[:ClientMessages|ClientMessages]].

Received by [[:Structs:CBabelDConnection|CBabelDConnection]]::ClientClientCommand

===== C_TID_VIRTUAL_CONNECT =====

44 bytes

* +0: Type (int, 0x1e)
	* int type

Sent from [[:Structs:CBabelVirtualSocket|CBabelVirtualSocket]]::Connect(B_UIN *)
Received by [[:Structs:CBabelDConnection|CBabelDConnection]]::VirtualCircuitConnect
Responded to with a C_TID_CLIENT_COMMAND
