Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-09-15T15:44:57+01:00

====== CTOS ======

===== C_TID_BASE =====

Note that this acts as a "base" for other packets.

32 bytes

* +0: Type
	* int type
		* This is really really weird. It's treated as either char[4] or an int depending on the whim of the function.
	* 0x09: MessageDispatch - C_TID_MESSAGE
	* 0x0F: GetClientInfo
	* 0x10: AddWWREntry - C_TID_WWR
	* 0x11: RemoveWWREntry - C_TID_WWR
	* 0x12: NotifyListeningPort - C_TID_NOTIFY_LISTENING_PORT
	* 0x13: GetConnectionDetail
	* 0x14: ClientCommand - C_TID_CLIENT_COMMAND
	* 0x1E: VirtualCircuitConnect - C_TID_VIRTUAL_CONNECT
	* 0x0221: DSFetchRandomUser - C_TID_DS_FETCH_RANDOM_USER
	* 0x25: Handshake - C_TID_HANDSHAKE
* +4: Field A (usually server UID)
* +8: Field B (usually server HID)
* +12: Field C (usually a UID, target's or user's)
* +16: Field D (usually a HID, target's or user's)
* +20: Ticket number (if non-zero, the packet expects a response) - see [[STOC]] logic of this field for how this works.
	* int ticketDispatch
	* If non-zero, a response from the server is expected.
	* The code is very certain to never allocate ticket ID 0, as that would not appear as a response to STOC logic.
* +24: Usually indicates the length of further data (but only in packets with variable-length further data).
	* int furtherData
* +28: Field E

===== C_TID_MESSAGE =====

//name is a guess//
40 bytes + message data

* Type: 0x09
* A/B: Server UID/HID
* C/D: User UID/HID (as if from [[:Structs:CBabelClient|CBabelClient]]::GetUser)
* Ticket number: 0
* Further data: Length of the following [[Formats:Packed Babel Message]] in bytes. Note this is the whole thing including framing.
* E: 0
* +32: Target UID
	* int targetUID
* +36: Target HID
	* int targetHID

This is followed by the actual message as described with the length.

See [[:Structs:CBabelClient|CBabelClient]]::SendBinaryMessage
For a sent packet, see dsprotocol/pk/chat1

===== C_TID_WWR =====

//name is a guess//
32 bytes

* +0: Type. Set 0x10 for add, 0x11 for remove
	* int type
* +4: Server UID
* +8: Server HID
* +12: Target UID
	* int uid
* +16: Target HID
	* int hid
* +20: 0
* +24: 0
* +28: 0

Seen in [[:Structs:CBabelClient|CBabelClient]]::AddWWREntry / CBabelClient::RemoveWWREntry.

===== C_TID_NOTIFY_LISTENING_PORT =====

//name is a guess//
32 bytes

* Type: 0x12
* A/B: Server UID/HID
* C/D: 0
* Ticket number: 0
* Further data: 0
* E: Parameter to NotifyListeningPort - presumably would have been a port number.

Sent by [[:Structs:CBabelClient|CBabelClient]]::NotifyListeningPort

//**It's worth noting that the client code will never actually send this - SetPeerListener is a NOP which always fails.**//
//**But the peer link mechanism itself might still be in use, as VirtualCircuit-related functions still use it.**//

===== C_TID_CLIENT_COMMAND =====

//name is a guess//
//Has an STOC equivalent//
36 bytes

* Type: 0x14
* A/B: Server UID/HID
* C/D: presumably receiver UID/HID
* Ticket number: 0
* Further data: 0
* E: a parameter?
* +32: 0xE is a special value here?
	* int unknown

Sent from [[:Structs:CBabelVirtualSocket|CBabelVirtualSocket]]::Connect(C_TID_VIRTUAL_CONNECT *)

===== C_TID_VIRTUAL_CONNECT =====

//Has an STOC equivalent//
44 bytes

* +0: Type (int, 0x1e)
	* int type

Sent from [[:Structs:CBabelVirtualSocket|CBabelVirtualSocket]]::Connect(B_UIN *)
Responded to with a C_TID_CLIENT_COMMAND

===== C_TID_DS_FETCH_RANDOM_USER =====

//name is a guess//
32 bytes

* Type: 0x0221
* A/B: Server UID/HID
* C/D: User UID/HID
* Ticket number: Allocated
* Further data: 0
* E: 3

==== Response ====

Assumed to be just a C_TID_BASE:
* Type: ?
* A/B: ?
* C/D: Response UID/HID
* Ticket number: As expected
* Further data: Not checked
* E: Expected to be 1 for success

Sent and response received in [[:Structs:DSNetManager|DSNetManager]]::AsyncDSFetchRandomUser

===== C_TID_HANDSHAKE =====

//name is a guess//
52 bytes + additional bytes

* +0: Type (0x25)
	* int type
* +4, +8: 0
	* int zero, zero
* +12: Current UID (as if from [[:Structs:CBabelClient|CBabelClient]]::GetUser)
	* int currentUID
* +16: Current HID
	* int currentHID
* +20: Ticket number
	* int ticketNumber
* +24, +28: 0
	* int zero, zero
* +32: 1
	* int one
* +36: 2
	* int two
* +40: 0
* +44: Length of zero-terminated username
* +48: Length of zero-terminated password
Username and password, with zero terminators, follow.

Sent from [[:Structs:CBabelClient|CBabelClient]]::Connect(char const *,char const *,char const *,int,bool,bool)
