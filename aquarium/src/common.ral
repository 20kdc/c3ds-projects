/*
 * c3ds-projects - Assorted compatibility fixes & useful tidbits
 * Written starting in 2022 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

class Pointer 2 1 1;
include "std/engine.ral";

// event codes

// "{state}" : aquarium launch with given state
AQUA_EVC_SWITCHER_START = "switcher-start";
// "" : too many failures
AQUA_EVC_SWITCHER_HALT = "switcher-halt";
// "{worldName}" : new world
AQUA_EVC_SWITCHER_NEW_WORLD = "switcher-new-world";
// "" : kill signal
AQUA_EVC_SWITCHER_SIGTERM = "switcher-sigterm";
// "{worldName}\t{daemon}" : starting daemon
AQUA_EVC_MONITOR_STARTING_DAEMON = "monitor-starting-daemon";
// "{worldName}\t{daemon}" : looping daemon (checks for errors)
AQUA_EVC_MONITOR_LOOPING_DAEMON = "monitor-looping-daemon";
// "{worldName}" : all daemons started, waiting for a second to do soak test
AQUA_EVC_MONITOR_STARTUP_SOAK = "monitor-startup-soak";
// "{worldName}" : soak test succeeded, startup ok
AQUA_EVC_MONITOR_STARTUP_OK = "monitor-startup-ok";
// "" : online
AQUA_EVC_MONITOR_ONLINE = "monitor-online";
// "" : offline
AQUA_EVC_MONITOR_OFFLINE = "monitor-offline";
// "{erra}\t{rawe}" : failed login
AQUA_EVC_MONITOR_LOGIN_ERROR = "monitor-login-error";
// "" : kill signal
AQUA_EVC_MONITOR_SIGTERM = "monitor-sigterm";
// "" : got stopfile
AQUA_EVC_MONITOR_STOPFILE = "monitor-stopfile";
// "(a lot of details check the file)" : life event
AQUA_EVC_MONITOR_LIFE_EVENT = "monitor-life-event";
// "{id}\t{unid}" : task started
AQUA_EVC_TASKMGR_START = "taskmgr-start";
// "{id}\t{unid}" : task finished
AQUA_EVC_TASKMGR_END = "taskmgr-end";

// universal class structure

// This thing represents the main loop.
// AquaLoop gets killed to reset this.
class AquaLoop 1 2 42083;
// This thing represents the event handler.
class AquaHandler 1 2 42084;
// This thing represents a running background task.
// These are *NOT* killed on update.
class AquaTask 1 2 42085;
// Task details.
field str AquaTask.what 0;
// Task details, machine-readable
field str AquaTask.what_machine 1;

// Sets up loop and handler agents in the world.
macro () aquaSetup() {
	foreach (AquaLoop in enum) {
		kill(targ);
	}
	foreach (AquaHandler in enum) {
		kill(targ);
	}
	newSimp(AquaLoop, "blnk", 0, 0, 0);
	newSimp(AquaHandler, "blnk", 0, 0, 0);
	imsk(IMSK_KEY_DOWN);
}

// Launches a task.
macro () aquaLaunchTask(str @reason, int id, any @p1, any @p2) {
	newSimp(AquaTask, "blnk", 0, 0, 0);
	alias targ!AquaTask;
	targ.what = '{unid()}: {id}: {reason}';
	targ.what_machine = '{id}\t{unid()}';
	aquaEvent(AQUA_EVC_TASKMGR_START, targ.what_machine, 'Start: {targ.what}');
	tick(1);
	mesgWrtP(targ, id, p1, p2, 0);
}

script AquaTask:timer {
	inst();
	aquaEvent(AQUA_EVC_TASKMGR_END, ownr.what_machine, 'End: {ownr.what}');
	kill(ownr);
}

// states

// First boot or everything is OK.
AQUA_WS_STATE_NOMINAL = 0;

// Crashed before aquarium declared stable.
// Retry.
AQUA_WS_STATE_DIED = 1;

// Crashed before aquarium declared stable for a second time.
// Wipe world, retry.
AQUA_WS_STATE_DIED_AGAIN = 2;

// Aquarium cannot continue.
AQUA_WS_STATE_HALT = 3;

// Gets the state of the state machine.
macro aquaWSStateGet() {
	fileIope(FILE_DIR_MAIN, "aquariumStateMachine");
	let val = AQUA_WS_STATE_NOMINAL;
	if inok() {
		val = inni();
	}
	fileIclo();
	return val;
};

// Sets the state of the state machine.
macro () aquaWSStateSet(int @value) {
	fileOope(FILE_DIR_MAIN, "aquariumStateMachine", false);
	outv(value);
	fileOclo();
}

// Gets the generation number.
macro aquaWSGenGet() {
	fileIope(FILE_DIR_MAIN, "aquariumWorldsKilled");
	let val = 0;
	if inok() {
		val = inni();
	}
	fileIclo();
	return val;
};

// Sets the generation number.
macro () aquaWSGenSet(int @value) {
	fileOope(FILE_DIR_MAIN, "aquariumWorldsKilled", false);
	outv(value);
	fileOclo();
}

// Abort and signal a boot loop so we won't be restarted
macro () aquaAbort() {
	fileOope(FILE_DIR_MAIN, "aquariumBootLoopDetected", false);
	fileOclo();
	quit();
	stop();
}

// Open stdout
macro aquaStdout() fileOope(FILE_DIR_MAIN, "stdout", true);

// Open stderr
macro aquaStderr() fileOope(FILE_DIR_MAIN, "stderr", true);

// Writes an event.
macro () aquaEvent(str @name, str @mach, str @text) {
	aquaStdout();
	outs('AQUA\t{rtim()}\t{name}\t{mach}\t{text}\n');
	fileOclo();
}
