/*
 * c3ds-projects - Assorted compatibility fixes & useful tidbits
 * Written starting in 2022 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

include "world_header.ral";

include "updater.ral";
include "map.ral";
include "warp.ral";
include "life_events.ral";

install {
	// we need to stop these IMMEDIATELY
	// may undo changes made by Aquarium
	foreach (DSAutorecovery in enum) {
		kill(targ);
	}
	// pauses world if allowed to run
	foreach (DSLoginWindow in enum) {
		kill(targ);
	}
	// we *should* do these early (we don't *have to*, we just should)
	foreach (UIKeyboardHandlerHelpDialog in enum) {
		// Aquarium's exit handler and DS's exit handler conflict.
		kill(targ);
	}
	// these are sane right
	gameStr("user_of_this_world") = eameStr("aquarium_user");
	gameInt("breeding_limit") = 64;
	gameInt("total_population") = 66;
	// name generator test
	// aquaStderr();
	// outs('generator test: {aquaHivetokgen()}\n');
	// continue...
	aquaSetup();
}

script AquaLoop:init {
	// avoid JECT crash risk by doing this all here
	inst();

	// do daemon CALLs
	for daemon = 0; daemon < AQUA_DAEMONS; daemon++; {
		aquaEvent(AQUA_EVC_MONITOR_STARTING_DAEMON, '{eameStr("aquarium_world_id")}\t{daemon}', 'Starting daemon {daemon}');
		callIndirect(AQUA_DSC_OPEN + daemon, 0, 0);
	}
	// for good measure
	// this will catch errors that might otherwise occur immediately after we declare the world OK
	for daemon = 0; daemon < AQUA_DAEMONS; daemon++; {
		aquaEvent(AQUA_EVC_MONITOR_LOOPING_DAEMON, '{eameStr("aquarium_world_id")}\t{daemon}', 'Looping daemon {daemon} to check for errors');
		callIndirect(AQUA_DSC_LOOP + daemon, 0, 0);
	}

	aquaEvent(AQUA_EVC_MONITOR_STARTUP_SOAK, '{eameStr("aquarium_world_id")}', "Daemons ready, waiting for a second to confirm world doesn't crash");

	// WE ARE OFFICIALLY DONE WITH SETUP, NOW LET'S WAIT FOR ERRORS
	// if we're crashing after a set amount of time, this guarantees we make forward progress
	wait(20);
	inst();
	save();

	// ALL OKAY! let's tell WS the good news!
	aquaWSStateSet(AQUA_WS_STATE_NOMINAL);
	aquaEvent(AQUA_EVC_MONITOR_STARTUP_OK, '{eameStr("aquarium_world_id")}', "Aquarium OK");

	loop {
		for daemon = 0; daemon < AQUA_DAEMONS; daemon++; {
			callIndirect(AQUA_DSC_LOOP + daemon, 0, 0);
		}
		// 1 second before each daemon refresh
		wait(20);
		inst();
	}
}

// This ensures the server correctly reacts to kill signals.
// Basically, SDL translates kill signals into `SDL_QUIT`.
// `SDL_QUIT` is then translated into `VK_ESCAPE`.
script AquaHandler:rawKeyDown {
	inst();
	if _p1_ == VK_ESCAPE {
		aquaEvent(AQUA_EVC_MONITOR_SIGTERM, "", "kill signal received, shutting down...");
		save();
		quit();
	}
}
