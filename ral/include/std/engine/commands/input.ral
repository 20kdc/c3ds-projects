/*
 * c3ds-projects - Assorted compatibility fixes & useful tidbits
 * Written starting in 2022 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

/*
 * 2.286c/Input
 */

include "std/engine/commands_inc.ral";

/*
Sets the handling of clicking on the `targ` agent to send the given message ID.
-1 means no message.
*/
macro () clac(int @m) @'clac {m}';

/*
Sets the handling of clicking on the `targ` agent to toggle between up to three message IDs.
-1 means no message, and thus skips the slot.
*/
macro () clik(int @m1, int @m2, int @m3) @'clik {m1, m2, m3}';

/*
Returns the number of the part underneath the pointer, or -1 for "no agent".
Transparency is not considered -- bounding boxes are used.
The agent this part is relative to is `hots` (which does consider transparency).
See also `hots`.
*/
macro hotp() @'hotp'!int;


/*
Returns the agent underneath the pointer, or null.
Transparency is considered based on the setting of the `tran` command.
*/
macro hots() @'hots'!Agent?;

/*
Sets the global input events the `targ` agent receives.
This is a bitfield -- OR together `IMSK_` constants.
*/
macro () imsk(int @mask) @'imsk {mask}';

// Returns true if the given key ID is down.
macro keyd(int @key) @'keyd {key}'!bool;

// Returns the mouse's world X position.
macro mopx() @'mopx'!int;

// Returns the mouse's world Y position.
macro mopy() @'mopy'!int;

/*
Sets the mouse button override mode.
This is a bitfield, see `MOUS_` constants.
*/
macro () mous(int @mode) @'mous {mode}';

// Returns the mouse's world X velocity.
macro movx() @'movx'!float;

// Returns the mouse's world Y velocity.
macro movy() @'movy'!float;

/*
This is a global flag that disables ordinary mouse behaviour.
That is, activating agents, picking up agents...
*/
macro () pure(bool @v) @'pure {v}';

// Returns the mouse's world X velocity.
macro pure() @'pure'!bool;

// conflict with the other tran from Agents

// Sets pixel-perfect click transparency (or lack thereof) on the given part of the `targ` agent.
macro () tranC(bool @v, int @p) @'tran {v, p}';

