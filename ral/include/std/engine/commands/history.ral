/*
 * c3ds-projects - Assorted compatibility fixes & useful tidbits
 * Written starting in 2022 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

/*
 * 2.286c/History
 */

include "std/engine/commands_inc.ral";

macro histCage(str @moniker, int @e) @'hist cage {moniker, e}'!int;
macro histCoun(str @moniker) @'hist coun {moniker}'!int;
macro histCros(str @moniker) @'hist cros {moniker}'!int;
macro () histEvnt(str @moniker, int @et, str @m1, str @m2) @'hist evnt {moniker, et, m1, m2}';
macro histFind(str @moniker, int @et, int @i) @'hist find {moniker, et, i}'!int;
macro histFinr(str @moniker, int @et, int @i) @'hist finr {moniker, et, i}'!int;

// Photo.
macro histFoto(str @moniker, int @e) @'hist foto {moniker, e}'!str;
/*
Sets a photo for `moniker` life event `e` to `v` -- photos follow the creature in exports, etc.
Photos can be created using `snap` and `HIST_TYPE_PHOTO` is what's used to carry them. (This includes birth/death photos, they don't get attached to the birth/death event.)
Don't set a photo on an event that already has one unless it's okay to delete that one (as that's what happens) -- see `loft` if you need to check.

Importantly, standard C3/DS life event photos are expected to be `119x139` in size. These constants are given as `C3DS_PHOTO_W` and `C3DS_PHOTO_H` for your convenience.
*/
macro () histFoto(str @moniker, int @e, str @v) @'hist foto {moniker, e, v}';

// 1 is male, 2 is female, don't interpret the name literally.
macro histGend(str @moniker) @'hist gend {moniker}'!int;
// Returns the genus of creature `moniker`
macro histGnus(str @moniker) @'hist gnus {moniker}'!int;
// Returns the first string of life event index `e` of creature history `moniker`
macro histMon1(str @moniker, int @e) @'hist mon1 {moniker, e}'!str;
// Returns the second string of life event index `e` of creature history `moniker`
macro histMon2(str @moniker, int @e) @'hist mon2 {moniker, e}'!str;
// Returns the amount of point mutations that occurred for the given moniker.
macro histMute(str @moniker) @'hist mute {moniker}'!int;

// Returns the name of a creature by moniker. (This is considered an attribute of the history/genome, so the creature need not have lived.)
macro histName(str @moniker) @'hist name {moniker}'!str;
// Sets the name of the creature by moniker. (This is considered an attribute of the history/genome, so the creature need not have lived.)
macro () histName(str @moniker, str @n) @'hist name {moniker, n}';

macro histNetu(str @moniker, int @e) @'hist netu {moniker, e}'!str;
macro histNext(str @moniker) @'hist next {moniker}'!str;
macro histPrev(str @moniker) @'hist prev {moniker}'!str;
macro histRtim(str @moniker, int @e) @'hist rtim {moniker, e}'!int;
macro histTage(str @moniker, int @e) @'hist tage {moniker, e}'!int;
macro histType(str @moniker, int @e) @'hist type {moniker, e}'!int;

macro histUtxt(str @moniker, int @e) @'hist utxt {moniker, e}'!str;
macro () histUtxt(str @moniker, int @e, str @v) @'hist utxt {moniker, e, v}';

macro histVari(str @moniker) @'hist vari {moniker}'!int;
macro () histWipe(str @moniker) @'hist wipe {moniker}';
macro histWnam(str @moniker, int @e) @'hist wnam {moniker, e}'!str;
macro histWtik(str @moniker, int @e) @'hist wtik {moniker, e}'!int;
macro histWuid(str @moniker, int @e) @'hist wuid {moniker, e}'!str;
macro histWvet(str @moniker) @'hist wvet {moniker}'!bool;
macro ooww(str @moniker) @'ooww {moniker}'!int;

