/*
 * c3ds-projects - Assorted compatibility fixes & useful tidbits
 * Written starting in 2022 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

/*
 * 2.286c/Compounds
 */

include "std/engine/commands_inc.ral";

/*
With a text part selected, focuses the text field for editing.
With `null` selected, unfocuses.
*/
macro () fcus() &'fcus';

/*
With a text part selected, sets margins, spacing, and flags.
`l`, `t`, `r` and `b` make up the margins (default 8 8 8 8).
`ls` and `cs` make up the spacing (default 0 0).
`flags` makes up the flags (default 0) -- please see the `FRMT` set of constants.
*/
macro () frmt(int &l, int &t, int &r, int &b, int &ls, int &cs, int &flags) &'fcus';

/*
With a graph part selected, adds a line. You are expected to keep track of indexes yourself -- they start from 0 with the first line you add, then counts upward.
`minV`/`maxV` represent the minimum and maximum values for the line, which are mapped to the bottom and top of the graph respectively.
See `newGrph` and `grpv`.
*/
macro () grpl(int &r, int &g, int &b, num &minV, num &maxV) &'grpl {r, g, b, minV, maxV}';

// With a graph part selected, adds a value to a line of the given index. The graph advances when all graphs have had a line added to them.
macro () grpv(int &i, num &v) &'grpv {i, v}';

/*
Creates a new compound agent.
All parameters match those of `new: simp`.
However, their meaning differs slightly, in that they apply to the root part (part 0).
The `pat` series of commands adds new parts.
Commands that operate on parts select those parts with the `targ` and `part` variables -- `targ` points at the compound agent, and `part` points at the specific part number.
*/
macro () newComp(int &family, int &genus, int &species, str &gallery, int &count, int &first, int &plane) &'new: comp {family, genus, species, gallery, count, first, plane}';

// With a text part selected, returns the number of text pages. See `page`.
macro npgs() &'npgs'!int;

// With a text part selected, sets the current text page. See `npgs`.
macro () page(int &p) &'page {p}';

// With a text part selected, returns the current page.
macro page() &'npgs'!int;

// PART is handled in the compiler as a variable, because of it's nature as a pseudo-variable.

// Returns true if the given part exists on `targ`, false otherwise.
macro partExists(int &i) &'part {i}'!bool;

/*
Adds a new button part to the `targ` compound agent.
*/
// OH WAIT THIS USES BYTE-STRINGS
//macro () patButt(int &family, int &genus, int &species, str &gallery, int &count, int &first, int &plane) &'new: comp {family, genus, species, gallery, count, first, plane}';

/*
Adds a new camera-view part to the `targ` compound agent.
`id` is the part ID for this part.
`gallery` may be an empty string for no overlay, but is otherwise the sprite of an overlay on top of the camera view.
`first` is the initial frame that all further sprite commands on this part are relative to.
`x`, `y`, and `plane` are relative to part 0.
`camW` and `camH` represent the world width/height the camera covers, while `partW` and `partH` represent the size of the display (this part).
To be clear, this is _not_ backwards, if anything the official documentation is really really confusing.
*/
macro () patCmra(int &id, str &gallery, int &first, num &x, num &y, int &plane, int &camW, int &camH, int &partW, int &partH) &'pat: cmra {id, gallery, first, x, y, plane, camW, camH, partW, partH}';

/*
Adds a functionless sprite (aka a "dull part") to the `targ` compound agent.
`id` is the part ID for this part.
`gallery` is the filename of the sprite file in Images, minus the `.s16`/`.c16` extension.
`first` is the initial frame that all further sprite commands on this part are relative to.
`x`, `y`, and `plane` are relative to part 0.
*/
macro () patDull(int &id, str &gallery, int &first, num &x, num &y, int &plane) &'pat: dull {id, gallery, first, x, y, plane}';

/*
Adds a fixed text (i.e. label) part to the `targ` compound agent.
Notably, most commands used on regular text parts work on fixed text parts.
`id` is the part ID for this part.
`gallery` is the filename of the sprite file in Images, minus the `.s16`/`.c16` extension.
`first` is the initial frame that all further sprite commands on this part are relative to.
Beware -- text parts particularly care about the size of this image for how they format text.
You almost certainly will need to create specific images for your text parts.
`x`, `y`, and `plane` are relative to part 0.
`fontGallery` is like `gallery`, but refers to a font.
See also `ptxt` and `frmt`.
*/
macro () patFixd(int &id, str &gallery, int &first, num &x, num &y, int &plane, str &fontGallery) &'pat: fixd {id, gallery, first, x, y, plane, fontGallery}';

/*
Adds a graph part to the `targ` compound agent.
`id` is the part ID for this part.
`gallery` is of an overlay on top of the graph.
`first` is the initial frame that all further sprite commands on this part are relative to.
`x`, `y`, and `plane` are relative to part 0.
`values` is the amount of values stored in the graph, equally spaced over the X axis.
See also `grpl`, `grpv`.
*/
macro () patGrph(int &id, str &gallery, int &first, num &x, num &y, int &plane, int &values) &'pat: grph {id, gallery, first, x, y, plane, values}';

/*
Removes a part (except 0) from the `targ` compound agent.
*/
macro () patKill(int &id) &'pat: kill {id}';

/*
Moves a part on the `targ` compound agent.
*/
macro () patMove(int &id, num &x, num &y) &'pat: move {id, x, y}';

// MISSING

/*
Adds a text (i.e. textbox) part to the `targ` compound agent.
`id` is the part ID for this part.
`gallery` is the filename of the sprite file in Images, minus the `.s16`/`.c16` extension.
`first` is the initial frame that all further sprite commands on this part are relative to.
Beware -- text parts particularly care about the size of this image for how they format text.
You almost certainly will need to create specific images for your text parts.
`x`, `y`, and `plane` are relative to part 0.
`msgId` is a message number to send on Enter, or one of the `PAT_TEXT_` constants. (In particular, `PAT_TEXT_MULTILINE` allows for multi-line fields.)
`fontGallery` is like `gallery`, but refers to a font.
See also `ptxt`, `fcus` and `frmt`.
*/
macro () patText(int &id, str &gallery, int &first, num &x, num &y, int &plane, int &msgId, str &fontGallery) &'pat: text {id, gallery, first, x, y, plane, msgId, fontGallery}';

// Given a part ID (or -1 for the first), returns the next part ID (or -1 after the last part).
macro pnxt(int &id) &'pnxt {id}'!int;

// Sets the text of the selected text part. See `patFixd` and `patText`.
macro () ptxt(str &txt) &'ptxt {txt}';

// Gets the text of the selected text part. See `patFixd` and `patText`.
macro ptxt() &'ptxt'!str;

