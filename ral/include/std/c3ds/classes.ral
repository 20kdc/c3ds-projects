/*
 * c3ds-projects - Assorted compatibility fixes & useful tidbits
 * Written starting in 2022 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

/*
 * C3DS classes.
 * This is specifically a listing of classes, messages and fields common between Creatures 3 and Docking Station.
 */

// Agent fields

// In theory, this is C3-only, but in practice if you're writing a C3/DS agent you should know this is a Thing.
field int Agent.wetnessCounter 60;

// In theory, this is C3-only, but in practice if you're writing a C3/DS agent you should know this is a Thing.
field int Agent.recyclerEnergy 61;

// Family 1

// Shows the room ID of the top-left of `pntr`. Managed by `PointerToolMultiplexer`.
class UIRoomTool 1 1 18;

// Shows the top-left world position of `pntr`. Managed by `PointerToolMultiplexer`.
class UIXYTool 1 1 59;

/*
This agent is responsible for managing which of the "pointer tools" is active.

The "pointer tools" are the tools that float relative to the Hand and show text under it:

* `UIRoomTool`
* `UIXYTool`
* `UITaxonomyTool`

While the tools can't overlap, they have separate variables for... some reason.

This agent is also responsible for Control-Shift-E (effectively unrelated).
*/
class PointerToolMultiplexer 1 1 121;
field bool PointerToolMultiplexer.toolXYActive 0;
field bool PointerToolMultiplexer.toolRoomActive 1;
field bool PointerToolMultiplexer.toolTaxonomyActive 2;

// Shows the classifier of `hots()` (if any). Managed by `PointerToolMultiplexer`.
class UITaxonomyTool 1 1 143;

/*
This is the agent on which keyboard focus sits most of the time.

When typing, it moves to the pointer, and acts as the box in which you type a sentence to say.

OV10 through OV99 inclusive are a history buffer (see `avar` for how, and the Docking Station keyboard handler help for instructions).
*/
class UIHandSpeechBox 1 2 3;
// Last typed line.
field str UIHandSpeechBox.lastTyped 0;
// Last OV slot to which a line was written.
field int UIHandSpeechBox.historyWriteIdx 1;
// Last OV slot from which a line was read.
field int UIHandSpeechBox.historyReadIdx 2;

// Auto-saves when the timer goes off, implements Control-R manual save
class AutoSaveTimer 1 2 7;

/*
Creates speech bubbles based on the speechBubble message.
You can also send that message directly to cause speech bubbles yourself.
*/
class SpeechBubbleFactory 1 2 10;

/*
Takes a photo on its next timer tick, and then removes itself.

Initialize this by setting the two fields, `photoSubject` and `photoMoniker`, and then using `tick` to schedule the next timer update.

If the subject is null, silently disappears -- if the moniker is invalid, expect not-silent failures.
*/
class LifeEventDelayedPhoto 1 2 37;
// Subject, intended to be a creature but is not necessarily one
field Agent? LifeEventDelayedPhoto.photoSubject 0;
// Moniker, must be valid (not necessarily alive, but the history must exist)
field str LifeEventDelayedPhoto.photoMoniker 1;

/*
Control-Shift-P debug tool. Shows `pace()` and `totl(Agent)` information.

When not in use, hides off-screen.
*/
class UIFrameRate 1 2 201;
field bool UIFrameRate.toolActive 0;

// Family 2
class Pointer 2 1 1;

/*
The category-based genuses aren't given here because there's sort of an implication there that things need to be of those genuses.
They do not.
*/

// Family 3

// Family 4
class Creature 4 0 0;

