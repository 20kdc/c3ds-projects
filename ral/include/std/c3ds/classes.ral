/*
 * c3ds-projects - Assorted compatibility fixes & useful tidbits
 * Written starting in 2022 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

/*
 * C3DS classes.
 * This is specifically a listing of classes, messages and fields common between Creatures 3 and Docking Station.
 */

// -- Classes with no specific file go here --

// The Hand.
class Pointer 2 1 1;
// Creature base class.
class Creature 4 0 0;

// "C3/agent help.cos" "DS/DS agent help.cos"

// Manager for agent help.
class UIAgentHelp 1 2 4;

// Agent help dialog.
class UIAgentHelpDialog 1 2 5;

// Active agent help dialog.
field UIAgentHelpDialog? UIAgentHelp.activeHelpDialog 0;

// The agent for which help is being requested.
field Agent UIAgentHelpDialog.inspectedAgent 2;

// "C3/autosave.cos" "DS/DS autosave.cos"
// Auto-saves when the timer goes off, implements Control-R manual save
class AutoSaveTimer 1 2 7;

// "C3/bacteria.cos" "DS/DS bacteria.cos"
// Bacteria. Infectious bad no-good stuff.
class Bacteria 2 32 23;

// "C3/blueprint agent scripts.cos" "DS/DS blueprint agent scripts.cos"

class BlueprintPickup 1 1 100;

class UIBlueprintDialog 1 2 33;

// "C3/CAOS command line.cos" "DS/DS CAOS command line.cos"

class UICAOSCommandLine 1 2 203;

// "C3/creature history.cos" "DS/DS creature history.cos"

class UICreatureHistory 1 2 23;

// "C3/creatureBreeding.cos" "DS/DS creatureBreeding.cos"

class Egg 3 4 0;

// "C3/creatureDecisions.cos" "DS/DS creatureDecisions.cos"

class FXSleeping 1 2 28;

// "C3/creatureInvoluntary.cos" "DS/DS creatureInvoluntary.cos"

class FXBubbles 1 2 41;

// "C3/death.cos" "DS/DS death.cos"

class FXDeathCloud 1 1 56;

// While C3 favplaces and DS favplaces are "linked", they share no classes.

// "C3/Frame rater.cos" "DS/DS Frame rater.cos"

/*
Control-Shift-P debug tool. Shows `pace()` and `totl(Agent)` information.

When not in use, hides off-screen.
*/
class UIFrameRate 1 2 201;
field bool UIFrameRate.toolActive 0;

/*
The three C3/DS UI trays use the same in/out design.
They don't use the same code, though.
*/
interface UITray;

C3DS_UITRAY_STATE_IN = -1;
C3DS_UITRAY_STATE_OUT = 1;
field int UITray.uiTrayState 99;

// "C3/GUI 1.cos" "DS/ds gui - creaturemenu.cos"
class UICreatureMenu 1 2 13 extends UITray;
class UICreatureMenuCurrentCreature 1 2 35;

// "C3/GUI 1.cos" "DS/ds gui - inventory.cos"
class UIInventory 1 2 11 extends UITray;

// "C3/GUI 1.cos" "DS/ds gui - options.cos"
class UIOptions 1 2 12 extends UITray;

class UIAboutBox 1 2 34;

// "C3/GUI 1.cos" "DS/ds gui - topleft.cos"
class UITopleft 1 2 14;

// "C3/Home smell emitters.cos" "DS/DS Home smell emitters.cos"
class NornHomeEmitterA 3 5 1;
class NornHomeEmitterB 3 5 2;
class GrendelHomeEmitterA 3 6 1;
class EttinHomeEmitterA 3 7 1;

// "C3/keyboard handler.cos" "DS/DS keyboard handler.cos"
class KeyboardHandler 1 2 6;
class UIKeyboardHandlerHelpDialog 1 2 8;

// "C3/life event factory.cos" "DS/DS life event factory - PHOTOGRAPHS THE DEAD.cos"
class LifeEventFactory 1 2 24;

/*
Takes a photo on its next timer tick, and then removes itself.

Initialize this by setting the two fields, `photoSubject` and `photoMoniker`, and then using `tick` to schedule the next timer update.

If the subject is null, silently disappears -- if the moniker is invalid, expect not-silent failures.
*/
class LifeEventDelayedPhoto 1 2 37;
// Subject, intended to be a creature but is not necessarily one
field Agent? LifeEventDelayedPhoto.photoSubject 0;
// Moniker, must be valid (not necessarily alive, but the history must exist)
field str LifeEventDelayedPhoto.photoMoniker 1;

// "C3/norn indicator.cos" "DS/DS norn indicator.cos"
class FXNornIndicator 1 2 1;
field bool FXNornIndicator.showing 0;

// "C3/object of attention indicator.cos" "DS/DS object of attention indicator.cos"
class FXItIndicator 1 2 2;
field bool FXItIndicator.showing 0;

// "C3/pointer activate stimming norns.cos" "DS/DS pointer activate stimming norns.cos"
class PointerActivateStimmingNorns 1 1 123;

// "C3/Pointer scripts.cos" "DS/DS Pointer scripts.cos"
class FXPointerActionIcon 1 1 95;

// "C3/speech bubble factory.cos" "DS/DS speech bubble factory.cos"

/*
Creates speech bubbles based on the speechBubble message.
You can also send that message directly to cause speech bubbles yourself.
*/
class SpeechBubbleFactory 1 2 10;

class FXSpeechBubble 1 2 9;

// "C3/textentry.cos" "DS/DS textentry.cos"

/*
This is the agent on which keyboard focus sits most of the time.

When typing, it moves to the pointer, and acts as the box in which you type a sentence to say.

OV10 through OV99 inclusive are a history buffer (see `avar` for how, and the Docking Station keyboard handler help for instructions).
*/
class UIHandSpeechBox 1 2 3;
// Last typed line.
field str UIHandSpeechBox.lastTyped 0;
// Last OV slot to which a line was written.
field int UIHandSpeechBox.historyWriteIdx 1;
// Last OV slot from which a line was read.
field int UIHandSpeechBox.historyReadIdx 2;

// "C3/welcome screen.cos" "DS/DS welcome screen.cos"
class UIWelcomeScreen 1 2 26;

// "C3/wolf control.cos" "DS/DS wolf control.cos"
class UIWolfControl 1 2 202;

// "C3/XY tool.cos" "DS/dev tool.cos"

// Shows the room ID of the top-left of `pntr`. Managed by `PointerToolMultiplexer`.
class UIRoomTool 1 1 18;

// Shows the top-left world position of `pntr`. Managed by `PointerToolMultiplexer`.
class UIXYTool 1 1 59;

/*
This agent is responsible for managing which of the "pointer tools" is active.

The "pointer tools" are the tools that float relative to the Hand and show text under it:

* `UIRoomTool`
* `UIXYTool`
* `UITaxonomyTool` (DS ONLY)

While the tools can't overlap, they have separate variables for... some reason.

This agent is also responsible for Control-Shift-E (effectively unrelated).
*/
class PointerToolMultiplexer 1 1 121;
field bool PointerToolMultiplexer.toolXYActive 0;
field bool PointerToolMultiplexer.toolRoomActive 1;

