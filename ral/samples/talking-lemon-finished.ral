// Include C3/DS definitions.
include "std/c3ds.ral";

/*
You can include files near the current file.
If the file is in the same directory, simply refer to it by name, say "abc.ral".
If the file is in the parent directory, refer to it as follows: "../abc.ral".
If the file is in a subdirectory, then refer to it as, say, "somedir/abc.ral".
Note that as far as RAL includes go, the sub-directory name of "std" is reserved for RAL's standard library.
*/
include "talking-lemon-finished-interface.ral";

// Value indicates the current speech line of the talking lemon.
field int TalkingLemon.line 0;

install {
	newTalkingLemon();
	// Move it to the Meso
	mvsf(631, 9158);
}

/*
One of the *Things To Check* from the Crash Course On CAOS For New Users was to move the attribute setup to a constructor script.
A solution for that in CAOS has been intentionally omitted from this manual.
However, it'll become an obstruction if delayed any longer.
It would also be valid to move this code into the newTalkingLemon macro.
*/
script TalkingLemon:init {
	inst();
	// Set attributes.
	// Note that targ starts out as equivalent to ownr at the start of a script in almost all cases.
	perm(100);
	attr(ATTR_PHYSICS | ATTR_COLLIDE | ATTR_PNTR_ACT1 | ATTR_PNTR_PICKUP | ATTR_AGNT_PICKUP);
	aero(10);
	accg(2);
}

script TalkingLemon:act1 {
	lock();
	let str text;
	if (ownr.line == 0) {
		text = "Hello! I'm a talking lemon!";
		ownr.line = 2;
		wait(15);
		ownr.line = 1;
	} else if (ownr.line == 1) {
		text = "Oh no, not again...";
		ownr.line = 2;
		wait(15);
		ownr.line = 0;
	} else {
		text = "You ought not to see this...";
		ownr.line = 0;
	}
	// The standard library doesn't yet have a complete class name set.
	// However, SpeechBubbleFactory is particularly useful.
	rtar(SpeechBubbleFactory);
	// targ is now SpeechBubbleFactory.
	// RAL is not aware that targ is SpeechBubbleFactory, so we have to cast it here.
	// Casting is of the form EXPRESSION!typeName, and causes RAL to treat it as if of the given type.
	// Note that mesgWrtP exists, but the emit statement is more convenient.
	// Emit statements have this form: EXPRESSION->message([p1[, p2]]) [after EXPRESSION];
	(targ!SpeechBubbleFactory)->speechBubble("Hello! I'm a talking lemon!", ownr);
}

remove {
	// Delete all talking lemons
	foreach (TalkingLemon in enum) {
		kill(targ);
	}
	// Remove the scripts
	scrx(TalkingLemon, TalkingLemon:init);
	scrx(TalkingLemon, TalkingLemon:act1);
}

