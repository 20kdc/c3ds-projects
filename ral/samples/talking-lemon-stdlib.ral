// Include C3/DS definitions.
include "std/c3ds.ral";

class TalkingLemon 2 24 8802;

// Value indicates the current speech line of the talking lemon.
field int TalkingLemon.line 0;

install {
	// Create the talking lemon
	// Note that TalkingLemon expands to 2 24 8802.
	// Macro call: NAME(EXPRESSION...)
	// newSimp is a macro that translates to NEW: SIMP.
	// The rest of the macros used here follow the same pattern.
	newSimp(TalkingLemon, "ds lemon pod", 1, 30, 8000);
	// Move it to the Meso
	mvsf(631, 9158);
	// Set attributes
	perm(100);
	// | is an operator which bitwise ORs together flags.
	// RAL will handle certain expressions on constants during compilation when possible, so this still compiles to "attr 199".
	attr(ATTR_PHYSICS | ATTR_COLLIDE | ATTR_PNTR_ACT1 | ATTR_PNTR_PICKUP | ATTR_AGNT_PICKUP);
	aero(10);
	accg(2);
}

script TalkingLemon:act1 {
	lock();
	let str text;
	if ownr.line == 0 {
		text = "Hello! I'm a talking lemon!";
		ownr.line = 2;
		wait(15);
		ownr.line = 1;
	} else if ownr.line == 1 {
		text = "Oh no, not again...";
		ownr.line = 2;
		wait(15);
		ownr.line = 0;
	} else {
		text = "You ought not to see this...";
		ownr.line = 0;
	}
	// The standard library doesn't have a complete set of class names.
	// So not everything in Creatures 3 or Docking Station is named.
	// However, SpeechBubbleFactory is particularly useful.
	rtar(SpeechBubbleFactory);
	// We have to write "targ!" here rather than just "targ" for one reason:
	// RAL assumes that targ could be NULL at any given time.
	// Specifying "!" after a value indicates to RAL that it can't be NULL.
	mesgWrtP(targ!, 126, "Hello! I'm a talking lemon!", ownr, 0);
	// A better way of writing this will be shown shortly.
}

remove {
	// Delete all talking lemons
	foreach (TalkingLemon in enum) {
		kill(targ);
	}
	// Remove the script
	scrx(TalkingLemon, TalkingLemon:act1);
}

