include "vending-machine-products.ral";

// Final version of dispenseProduct.
script VendingMachine:dispenseProduct {
	alias productToDrop = _p1_!int;
	lock();
	if productToDrop == -1 {
		// we've failed, nope sound
		sndc("beep");
	} else {
		sndc("lock");
		// animation of dropping product
		// start by nudging down/right
		let pX, pY = getProductLocation(productToDrop);
		for i = 0; i < 8; i++; {
			pX += 1;
			pY += 1;
			patMove(VMP_PRODUCTS + productToDrop, pX, pY);
			wait(1);
			inst();
		}
		// now let it 'fall' and hit bottom
		pY += 1;
		let velY = 0;
		while pY < 100 {
			patMove(VMP_PRODUCTS + productToDrop, pX, pY);
			wait(1);
			inst();
			velY += 1;
			pY += velY;
		}
		pY = 100;
		// push right
		while pX < 64 {
			pX += 4;
			patMove(VMP_PRODUCTS + productToDrop, pX, pY);
			wait(1);
			inst();
		}
		// finally...
		inst();
		spawnProduct(productType(productToDrop));
		// revert targ and virtual product goes bye-bye
		/*
		```
Note that RAL doesn't automatically manage targ for you.

A particular note on this front is that targ being cast inside a given scope won't cause it to be cast outside that scope, despite the value of targ being what was set inside.

This is mainly because this becomes meaningless once macro boundaries are crossed anyway -- for compile-time errors to work as they should, macros need to be properly isolated.

In some cases, RAL will change targ's type:

* Inside a `foreach` loop, it's cast to the type given in the `foreach` loop.
* When a `foreach` loop ends (to reflect `enum` changing `targ` to `ownr` at end), it's cast to the default of `Agent?`.
* When `with` is used on `targ`, it's automatically cast like any other value would be.
		```
		*/
		targ = ownr;
		patKill(VMP_PRODUCTS + productToDrop);
		productType(productToDrop) = PRODUCT_KIND_NONE;
	}
}

